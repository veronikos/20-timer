{"version":3,"sources":["components/timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","time","second","setSecond","isStart","setStart","useEffect","setTimeout","step","textButton","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAEaA,EAAQ,SAACC,GAAW,IAAD,EACFC,mBAASD,EAAME,MADb,mBACvBC,EADuB,KACfC,EADe,OAEFH,oBAAS,GAFP,mBAEvBI,EAFuB,KAEdC,EAFc,KAG9BC,qBAAW,WACLF,GACEG,YAAW,WACXL,EAAS,GACVC,EAAUD,EAASH,EAAMS,QAE3B,QAIP,IAAMC,EAAaL,EAAU,OAAS,QAEpC,OACE,sBAAKM,UAAU,MAAf,UACE,wBAAQA,UAAU,QAAQC,QAAS,kBAAMN,GAAUD,IAAnD,SAA8DK,IAC9D,wBAAQE,QAAS,WACfR,EAAUJ,EAAME,MAChBI,GAAS,IAFX,qBAIA,wCAAsB,IAAXH,EAAe,aAAeA,SCdhCU,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACI,cAAC,EAAD,CAAOT,KAAM,GAAIO,KAAM,OCOhBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b1ba73fb.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nexport const Timer = (props) => {\r\n  const [second, setSecond] = useState(props.time)\r\n  const [isStart, setStart] = useState(false)\r\n  useEffect (() => {\r\n    if (isStart) {\r\n          setTimeout(() => {\r\n      if (second > 0) {\r\n         setSecond(second - props.step)\r\n      }\r\n    }, 1000);\r\n    }\r\n  })\r\n\r\nconst textButton = isStart ? 'Stop' : 'Start'\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button className=\"clock\" onClick={() => setStart(!isStart)}>{textButton}</button>\r\n      <button onClick={() => {\r\n        setSecond(props.time);\r\n        setStart(true)\r\n      }}>Restart</button>\r\n      <h1>Time: {second === 0 ? 'Time is up' : second}</h1>\r\n    </div>\r\n  )\r\n}","import { Timer } from './components/timer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Timer time={12} step={1} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}